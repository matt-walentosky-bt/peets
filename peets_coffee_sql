--Peets Coffee Unified Query
with ae_trx as 
(
select 
LEFT(DATEOFBUSINESS,10) AS DATE,
CHECKNUMBER,
FKSTOREID, 
SUM(PRICE) AS TRX_COST
FROM
RAW_PROD.AE.DPVHSTGNDITEM
WHERE DATEOFBUSINESS >= '2023-02-01'
GROUP BY
LEFT(DATEOFBUSINESS,10),
CHECKNUMBER,
FKSTOREID 
),

ptrx_trx as 
(
 select 
  distinct
  ACCOUNT_ID,
  TRANSACTION_REQUEST_DETAIL_ID AS TRX_ID,
  LEFT(TRANSACTION_DATETIME,10) AS DATE,
  CHECK_NUMBER,
  STORE_CODE,
  STORE_NAME
  FROM
  RAW_PROD.PTRX.TRANSACTIONS
  where TRANSACTION_DATETIME >= '2023-02-01' AND TRANSACTION_TYPE = 'Accrual / Redemption' and STORE_CODE != 'OLO' and STORE_CODE != 'corp'  --and STORE_CODE != 'autorelo' 
  AND CARD_TEMPLATE = 'Peetnik Rewards'
),

ptrx_reg as 
(
  
select 
  A.ACCOUNT_ID,
  A.FIRST_NAME,
  A.LAST_NAME,
  A.EMAIL,
  A.POSTAL_CODE,
  A.EMAIL_OPT_IN,
  A.PUSH_OPT_IN,
  A.SMS_OPT_IN,
  A.SMS_OPT_IN_VERIFIED,
  1 AS PAYTRONIX_FLAG
  FROM
  (SELECT * FROM RAW_PROD.PTRX.REGISTRATIONS  where IS_REGISTERED = 1) A
  INNER JOIN
  (SELECT ACCOUNT_ID, MAX(_FILE_ROW_NUMBER) AS MAX_RECORD FROM RAW_PROD.PTRX.REGISTRATIONS GROUP BY ACCOUNT_ID ) MAX_ROW_DATA
  ON 
  A._FILE_ROW_NUMBER = MAX_ROW_DATA.MAX_RECORD
),

shopify as 
(
SELECT
  ID as TRX_ID,
  CUSTOMERID,
  CUSTOMERFIRSTNAME,
  CUSTOMERLASTNAME,
  EMAIL,
  TOTALPRICE,
  LEFT(PROCESSEDAT,10) AS DATE,
  'Shopify' as DATA_SOURCE
  FROM
  RAW_PROD.SHOPIFY.ORDERS
  where PROCESSEDAT >= '2023-02-01'
),


ae_ptrx_j_01 as 
(
SELECT
distinct
ae_trx.DATE,
ae_trx.CHECKNUMBER,
ae_trx.FKSTOREID, 
ae_trx.TRX_COST,
ptrx_trx.ACCOUNT_ID,
'AE' as DATA_SOURCE,
CONCAT(ae_trx.DATE,ae_trx.CHECKNUMBER,ae_trx.FKSTOREID) AS TRX_ID
FROM
ae_trx
LEFT JOIN
ptrx_trx
  ON CAST(ae_trx.CHECKNUMBER AS STRING) = CAST(ptrx_trx.CHECK_NUMBER AS STRING)
  AND CAST(ae_trx.DATE AS STRING) = CAST(ptrx_trx.DATE AS STRING)
  AND CAST(ae_trx.FKSTOREID AS STRING) = CAST(ptrx_trx.STORE_CODE AS STRING)
),
--select  * from ae_ptrx_j_01 WHERE ACCOUNT_ID IS NOT NULL AND DATE = '2023-02-01' AND FKSTOREID = '1096' ORDER BY ACCOUNT_ID
--select DATE, count(*), COUNT(DISTINCT ACCOUNT_ID) from ae_ptrx_j_01 GROUP BY DATE ORDER BY DATE;
--SELECT DATE, COUNT(DISTINCT ACCOUNT_ID), COUNT(DISTINCT) FROM ae_ptrx_j_01 WHERE ACCOUNT_ID IS NOT NULL;  --234953
--SELECT COUNT(DISTINCT TRX_ID) FROM ptrx_trx;
--select FKSTOREID, SUM(TRX_COST) from ae_ptrx_j_01 WHERE ACCOUNT_ID IS NOT NULL GROUP BY FKSTOREID ORDER BY SUM(TRX_COST) DESC;
--select distinct * from ae_ptrx_j_01 where FKSTOREID = '1096' and ACCOUNT_ID IS NOT NULL;
--select FKSTOREID, SUM(TRX_COST) from ae_ptrx_j_01 GROUP BY FKSTOREID ORDER BY SUM(TRX_COST) DESC;

--DO ALL PTRX TRX 
ae_ptrx_j_02 as 
(
SELECT
ae_ptrx_j_01.DATE,
ae_ptrx_j_01.CHECKNUMBER,
ae_ptrx_j_01.FKSTOREID, 
ae_ptrx_j_01.TRX_COST,
ae_ptrx_j_01.ACCOUNT_ID,
ae_ptrx_j_01.DATA_SOURCE,
ae_ptrx_j_01.TRX_ID,  
ptrx_reg.FIRST_NAME,
ptrx_reg.LAST_NAME,
ptrx_reg.EMAIL,
ptrx_reg.POSTAL_CODE,
ptrx_reg.PAYTRONIX_FLAG
FROM
ae_ptrx_j_01
LEFT JOIN
ptrx_reg
  ON CAST(ae_ptrx_j_01.ACCOUNT_ID as STRING) = CAST(ptrx_reg.ACCOUNT_ID as STRING)
),

shopify_paytronix_join as 
(
  SELECT
  shopify.TRX_ID,
  shopify.CUSTOMERID,
  shopify.CUSTOMERFIRSTNAME,
  shopify.CUSTOMERLASTNAME,
  shopify.EMAIL,
  shopify.TOTALPRICE,
  shopify.DATE,
  shopify.DATA_SOURCE,
  ptrx_reg.ACCOUNT_ID,
  ptrx_reg.FIRST_NAME,
  ptrx_reg.LAST_NAME,
  ptrx_reg.POSTAL_CODE,
  ptrx_reg.PAYTRONIX_FLAG
  FROM shopify
  LEFT JOIN
  ptrx_reg
  ON CAST(shopify.EMAIL AS STRING) = CAST(ptrx_reg.EMAIL AS STRING)
),

shopify_ae_union as
(
select 
DATE,
CAST(TRX_ID AS STRING) AS TRX_ID,
ACCOUNT_ID,  
TRX_COST,
CASE WHEN ACCOUNT_ID IS NOT NULL THEN TRX_COST ELSE 0 END AS PTRX_COST,
DATA_SOURCE,
--ae_ptrx_j_02.FIRST_NAME,
--ae_ptrx_j_02.LAST_NAME,
--ae_ptrx_j_02.EMAIL,
--ae_ptrx_j_02.POSTAL_CODE,
PAYTRONIX_FLAG  
from
ae_ptrx_j_02  
union all
select  
DATE,
CAST(TRX_ID AS STRING) AS TRX_ID,  
ACCOUNT_ID,
TOTALPRICE AS TRX_COST,
CASE WHEN ACCOUNT_ID IS NOT NULL THEN TRX_COST ELSE 0 END AS PTRX_COST,
DATA_SOURCE ,
PAYTRONIX_FLAG
from
shopify_paytronix_join    
)

SELECT 
DATA_SOURCE,
COUNT(DISTINCT TRX_ID) AS trx_count,
SUM(PAYTRONIX_FLAG) AS paytronix_trx_count,
COUNT(DISTINCT ACCOUNT_ID) as paytronix_customer_count,
sum(TRX_COST) as TRX_COST,
SUM(PTRX_COST) AS PTRX_COST
FROM shopify_ae_union
GROUP BY DATA_SOURCE;